import React, { useCallback, useEffect, useRef, useState } from 'react';
import LogoSvg from './components/Search/LogoSvg';
import Result from './components/Result/Result';
import Search from './components/Search/Search';
import Examples from './components/Examples/Examples';
import classes from './App.module.css';
import { getIpData, getClientIp } from './api-helper';

const initialUserData = {
  country: null,
  ip: null,
  isDataOfClient: false,
  ready: null,
};
function App() {
  const [userData, setUserData] = useState(initialUserData);
  const [error, setError] = useState(false);
  const inputRef = useRef();

  const fetchIPdata = useCallback(async (ip, isDataOfClient) => {
    cleanSearchBar();
    setError(false);
    const ipData = await getIpData(ip);
    if (ipData.error) {
      setUserData(initialUserData);
      setError(ipData.error);
    } else {
      setUserData((prevState) => {
        return {
          ...prevState,
          ready: true,
          ip: ip,
          isDataOfClient: isDataOfClient,
          ...ipData.data,
        };
      });
    }
  }, []);
  const searchIpHandler = () => {
    fetchIPdata(inputRef.current.value, false);
  };
  const cleanSearchBar = () => {
    inputRef.current.value = '';
  };

  useEffect(() => {
    const checkMobile = () =>
      window.innerWidth <= 450 && window.innerHeight <= 800 ? true : false;
    const chooseUserIp = async () => {
      const userIp = await getClientIp();
      fetchIPdata(userIp, true);
    };
    const isMobile = checkMobile();
    isMobile
      ? setError(
          'We tried to locate your IP but you use a mobile device. this app support PC IP only. select one from the examples above or provide it via input.'
        )
      : chooseUserIp();
  }, [fetchIPdata]);
  return (
    <div className={classes.app}>
      <section>
        <div className={classes.title}>
          <h1>Check that </h1> <LogoSvg />
        </div>
        <Search search={searchIpHandler} ref={inputRef} />
        <Examples fetchExample={fetchIPdata} />
      </section>

      {userData.ready ? (
        <Result data={userData} />
      ) : (
        <section>
          <p>{error ? error : 'Loading IP Data..'}</p>
        </section>
      )}
    </div>
  );
}

export default App;




















----------------------
import { createApi } from 'unsplash-js';
import { IPGEOLOCATION_API_KEY, UNSPLASH_API_KEY } from './api-config';
const unsplash = createApi({
  accessKey: UNSPLASH_API_KEY,
});

const defaultCountryImg =
  'https://www.globe.gov/o/gov.globe.home.explorelearnearth.web/images/learn-earth-system-clean.png';
export const getIpData = async (ip, isIpOfClient) => {
  let result = { error: false, data: null };
  try {
    if (ip === '' && !isIpOfClient) {
      throw new Error('Please provide IP for the search bar');
    }
    const rawIpData = await fetch(
      `https://api.ipgeolocation.io/ipgeo?apiKey=${IPGEOLOCATION_API_KEY}&ip=${ip}`
    );
    const ipData = await rawIpData.json();
    console.log(ipData);
    if (!ipData.country_name) {
      throw new Error('Sorry,no results for this IP address.');
    }
    const countryImg = await getImg(ipData.country_name);
    result.data = {
      flag: ipData.country_flag,
      img: countryImg,
      city: ipData.city,
      country: ipData.country_name,
      location: {
        latitude: ipData.latitude * 1,
        longitude: ipData.longitude * 1,
      },
    };
  } catch (e) {
    result.error = e.message;
  } finally {
    return result;
  }
};

const getImg = async (country) => {
  let result;
  try {
    const imgData = await unsplash.search.getPhotos({
      query: country,
    });
    result = imgData.response.results[0].urls.small;
  } catch {
    result = defaultCountryImg;
  }
  return result;
};
